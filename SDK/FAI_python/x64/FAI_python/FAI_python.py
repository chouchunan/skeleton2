# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FAI_python
else:
    import _FAI_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_uint8Array(nelements):
    return _FAI_python.new_uint8Array(nelements)

def delete_uint8Array(ary):
    return _FAI_python.delete_uint8Array(ary)

def uint8Array_getitem(ary, index):
    return _FAI_python.uint8Array_getitem(ary, index)

def uint8Array_setitem(ary, index, value):
    return _FAI_python.uint8Array_setitem(ary, index, value)
class int64p(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _FAI_python.int64p_swiginit(self, _FAI_python.new_int64p())
    __swig_destroy__ = _FAI_python.delete_int64p

    def assign(self, value):
        return _FAI_python.int64p_assign(self, value)

    def value(self):
        return _FAI_python.int64p_value(self)

    def cast(self):
        return _FAI_python.int64p_cast(self)

    @staticmethod
    def frompointer(t):
        return _FAI_python.int64p_frompointer(t)

# Register int64p in _FAI_python:
_FAI_python.int64p_swigregister(int64p)
class sizep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _FAI_python.sizep_swiginit(self, _FAI_python.new_sizep())
    __swig_destroy__ = _FAI_python.delete_sizep

    def assign(self, value):
        return _FAI_python.sizep_assign(self, value)

    def value(self):
        return _FAI_python.sizep_value(self)

    def cast(self):
        return _FAI_python.sizep_cast(self)

    @staticmethod
    def frompointer(t):
        return _FAI_python.sizep_frompointer(t)

# Register sizep in _FAI_python:
_FAI_python.sizep_swigregister(sizep)
class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _FAI_python.intp_swiginit(self, _FAI_python.new_intp())
    __swig_destroy__ = _FAI_python.delete_intp

    def assign(self, value):
        return _FAI_python.intp_assign(self, value)

    def value(self):
        return _FAI_python.intp_value(self)

    def cast(self):
        return _FAI_python.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return _FAI_python.intp_frompointer(t)

# Register intp in _FAI_python:
_FAI_python.intp_swigregister(intp)
class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _FAI_python.doublep_swiginit(self, _FAI_python.new_doublep())
    __swig_destroy__ = _FAI_python.delete_doublep

    def assign(self, value):
        return _FAI_python.doublep_assign(self, value)

    def value(self):
        return _FAI_python.doublep_value(self)

    def cast(self):
        return _FAI_python.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return _FAI_python.doublep_frompointer(t)

# Register doublep in _FAI_python:
_FAI_python.doublep_swigregister(doublep)
PFNC_Mono1p = _FAI_python.PFNC_Mono1p
PFNC_Mono2p = _FAI_python.PFNC_Mono2p
PFNC_Mono4p = _FAI_python.PFNC_Mono4p
PFNC_Mono8 = _FAI_python.PFNC_Mono8
PFNC_Mono8s = _FAI_python.PFNC_Mono8s
PFNC_Mono10 = _FAI_python.PFNC_Mono10
PFNC_Mono10p = _FAI_python.PFNC_Mono10p
PFNC_Mono12 = _FAI_python.PFNC_Mono12
PFNC_Mono12p = _FAI_python.PFNC_Mono12p
PFNC_Mono14 = _FAI_python.PFNC_Mono14
PFNC_Mono14p = _FAI_python.PFNC_Mono14p
PFNC_Mono16 = _FAI_python.PFNC_Mono16
PFNC_Mono32 = _FAI_python.PFNC_Mono32
PFNC_BayerBG4p = _FAI_python.PFNC_BayerBG4p
PFNC_BayerBG8 = _FAI_python.PFNC_BayerBG8
PFNC_BayerBG10 = _FAI_python.PFNC_BayerBG10
PFNC_BayerBG10p = _FAI_python.PFNC_BayerBG10p
PFNC_BayerBG12 = _FAI_python.PFNC_BayerBG12
PFNC_BayerBG12p = _FAI_python.PFNC_BayerBG12p
PFNC_BayerBG14 = _FAI_python.PFNC_BayerBG14
PFNC_BayerBG14p = _FAI_python.PFNC_BayerBG14p
PFNC_BayerBG16 = _FAI_python.PFNC_BayerBG16
PFNC_BayerGB4p = _FAI_python.PFNC_BayerGB4p
PFNC_BayerGB8 = _FAI_python.PFNC_BayerGB8
PFNC_BayerGB10 = _FAI_python.PFNC_BayerGB10
PFNC_BayerGB10p = _FAI_python.PFNC_BayerGB10p
PFNC_BayerGB12 = _FAI_python.PFNC_BayerGB12
PFNC_BayerGB12p = _FAI_python.PFNC_BayerGB12p
PFNC_BayerGB14 = _FAI_python.PFNC_BayerGB14
PFNC_BayerGB14p = _FAI_python.PFNC_BayerGB14p
PFNC_BayerGB16 = _FAI_python.PFNC_BayerGB16
PFNC_BayerGR4p = _FAI_python.PFNC_BayerGR4p
PFNC_BayerGR8 = _FAI_python.PFNC_BayerGR8
PFNC_BayerGR10 = _FAI_python.PFNC_BayerGR10
PFNC_BayerGR10p = _FAI_python.PFNC_BayerGR10p
PFNC_BayerGR12 = _FAI_python.PFNC_BayerGR12
PFNC_BayerGR12p = _FAI_python.PFNC_BayerGR12p
PFNC_BayerGR14 = _FAI_python.PFNC_BayerGR14
PFNC_BayerGR14p = _FAI_python.PFNC_BayerGR14p
PFNC_BayerGR16 = _FAI_python.PFNC_BayerGR16
PFNC_BayerRG4p = _FAI_python.PFNC_BayerRG4p
PFNC_BayerRG8 = _FAI_python.PFNC_BayerRG8
PFNC_BayerRG10 = _FAI_python.PFNC_BayerRG10
PFNC_BayerRG10p = _FAI_python.PFNC_BayerRG10p
PFNC_BayerRG12 = _FAI_python.PFNC_BayerRG12
PFNC_BayerRG12p = _FAI_python.PFNC_BayerRG12p
PFNC_BayerRG14 = _FAI_python.PFNC_BayerRG14
PFNC_BayerRG14p = _FAI_python.PFNC_BayerRG14p
PFNC_BayerRG16 = _FAI_python.PFNC_BayerRG16
PFNC_RGBa8 = _FAI_python.PFNC_RGBa8
PFNC_RGBa10 = _FAI_python.PFNC_RGBa10
PFNC_RGBa10p = _FAI_python.PFNC_RGBa10p
PFNC_RGBa12 = _FAI_python.PFNC_RGBa12
PFNC_RGBa12p = _FAI_python.PFNC_RGBa12p
PFNC_RGBa14 = _FAI_python.PFNC_RGBa14
PFNC_RGBa16 = _FAI_python.PFNC_RGBa16
PFNC_RGB8 = _FAI_python.PFNC_RGB8
PFNC_RGB8_Planar = _FAI_python.PFNC_RGB8_Planar
PFNC_RGB10 = _FAI_python.PFNC_RGB10
PFNC_RGB10_Planar = _FAI_python.PFNC_RGB10_Planar
PFNC_RGB10p = _FAI_python.PFNC_RGB10p
PFNC_RGB10p32 = _FAI_python.PFNC_RGB10p32
PFNC_RGB12 = _FAI_python.PFNC_RGB12
PFNC_RGB12_Planar = _FAI_python.PFNC_RGB12_Planar
PFNC_RGB12p = _FAI_python.PFNC_RGB12p
PFNC_RGB14 = _FAI_python.PFNC_RGB14
PFNC_RGB16 = _FAI_python.PFNC_RGB16
PFNC_RGB16_Planar = _FAI_python.PFNC_RGB16_Planar
PFNC_RGB565p = _FAI_python.PFNC_RGB565p
PFNC_BGRa8 = _FAI_python.PFNC_BGRa8
PFNC_BGRa10 = _FAI_python.PFNC_BGRa10
PFNC_BGRa10p = _FAI_python.PFNC_BGRa10p
PFNC_BGRa12 = _FAI_python.PFNC_BGRa12
PFNC_BGRa12p = _FAI_python.PFNC_BGRa12p
PFNC_BGRa14 = _FAI_python.PFNC_BGRa14
PFNC_BGRa16 = _FAI_python.PFNC_BGRa16
PFNC_BGR8 = _FAI_python.PFNC_BGR8
PFNC_BGR10 = _FAI_python.PFNC_BGR10
PFNC_BGR10p = _FAI_python.PFNC_BGR10p
PFNC_BGR12 = _FAI_python.PFNC_BGR12
PFNC_BGR12p = _FAI_python.PFNC_BGR12p
PFNC_BGR14 = _FAI_python.PFNC_BGR14
PFNC_BGR16 = _FAI_python.PFNC_BGR16
PFNC_BGR565p = _FAI_python.PFNC_BGR565p
PFNC_R8 = _FAI_python.PFNC_R8
PFNC_R10 = _FAI_python.PFNC_R10
PFNC_R10_Deprecated = _FAI_python.PFNC_R10_Deprecated
PFNC_R12 = _FAI_python.PFNC_R12
PFNC_R12_Deprecated = _FAI_python.PFNC_R12_Deprecated
PFNC_R16 = _FAI_python.PFNC_R16
PFNC_G8 = _FAI_python.PFNC_G8
PFNC_G10 = _FAI_python.PFNC_G10
PFNC_G10_Deprecated = _FAI_python.PFNC_G10_Deprecated
PFNC_G12 = _FAI_python.PFNC_G12
PFNC_G12_Deprecated = _FAI_python.PFNC_G12_Deprecated
PFNC_G16 = _FAI_python.PFNC_G16
PFNC_B8 = _FAI_python.PFNC_B8
PFNC_B10 = _FAI_python.PFNC_B10
PFNC_B10_Deprecated = _FAI_python.PFNC_B10_Deprecated
PFNC_B12 = _FAI_python.PFNC_B12
PFNC_B12_Deprecated = _FAI_python.PFNC_B12_Deprecated
PFNC_B16 = _FAI_python.PFNC_B16
PFNC_Coord3D_ABC8 = _FAI_python.PFNC_Coord3D_ABC8
PFNC_Coord3D_ABC8_Planar = _FAI_python.PFNC_Coord3D_ABC8_Planar
PFNC_Coord3D_ABC10p = _FAI_python.PFNC_Coord3D_ABC10p
PFNC_Coord3D_ABC10p_Planar = _FAI_python.PFNC_Coord3D_ABC10p_Planar
PFNC_Coord3D_ABC12p = _FAI_python.PFNC_Coord3D_ABC12p
PFNC_Coord3D_ABC12p_Planar = _FAI_python.PFNC_Coord3D_ABC12p_Planar
PFNC_Coord3D_ABC16 = _FAI_python.PFNC_Coord3D_ABC16
PFNC_Coord3D_ABC16_Planar = _FAI_python.PFNC_Coord3D_ABC16_Planar
PFNC_Coord3D_ABC32f = _FAI_python.PFNC_Coord3D_ABC32f
PFNC_Coord3D_ABC32f_Planar = _FAI_python.PFNC_Coord3D_ABC32f_Planar
PFNC_Coord3D_ABC64f = _FAI_python.PFNC_Coord3D_ABC64f
PFNC_Coord3D_ABC64f_Planar = _FAI_python.PFNC_Coord3D_ABC64f_Planar
PFNC_Coord3D_AC8 = _FAI_python.PFNC_Coord3D_AC8
PFNC_Coord3D_AC8_Planar = _FAI_python.PFNC_Coord3D_AC8_Planar
PFNC_Coord3D_AC10p = _FAI_python.PFNC_Coord3D_AC10p
PFNC_Coord3D_AC10p_Planar = _FAI_python.PFNC_Coord3D_AC10p_Planar
PFNC_Coord3D_AC12p = _FAI_python.PFNC_Coord3D_AC12p
PFNC_Coord3D_AC12p_Planar = _FAI_python.PFNC_Coord3D_AC12p_Planar
PFNC_Coord3D_AC16 = _FAI_python.PFNC_Coord3D_AC16
PFNC_Coord3D_AC16_Planar = _FAI_python.PFNC_Coord3D_AC16_Planar
PFNC_Coord3D_AC32f = _FAI_python.PFNC_Coord3D_AC32f
PFNC_Coord3D_AC32f_Planar = _FAI_python.PFNC_Coord3D_AC32f_Planar
PFNC_Coord3D_AC64f = _FAI_python.PFNC_Coord3D_AC64f
PFNC_Coord3D_AC64f_Planar = _FAI_python.PFNC_Coord3D_AC64f_Planar
PFNC_Coord3D_A8 = _FAI_python.PFNC_Coord3D_A8
PFNC_Coord3D_A10p = _FAI_python.PFNC_Coord3D_A10p
PFNC_Coord3D_A12p = _FAI_python.PFNC_Coord3D_A12p
PFNC_Coord3D_A16 = _FAI_python.PFNC_Coord3D_A16
PFNC_Coord3D_A32f = _FAI_python.PFNC_Coord3D_A32f
PFNC_Coord3D_A64f = _FAI_python.PFNC_Coord3D_A64f
PFNC_Coord3D_B8 = _FAI_python.PFNC_Coord3D_B8
PFNC_Coord3D_B10p = _FAI_python.PFNC_Coord3D_B10p
PFNC_Coord3D_B12p = _FAI_python.PFNC_Coord3D_B12p
PFNC_Coord3D_B16 = _FAI_python.PFNC_Coord3D_B16
PFNC_Coord3D_B32f = _FAI_python.PFNC_Coord3D_B32f
PFNC_Coord3D_B64f = _FAI_python.PFNC_Coord3D_B64f
PFNC_Coord3D_C8 = _FAI_python.PFNC_Coord3D_C8
PFNC_Coord3D_C10p = _FAI_python.PFNC_Coord3D_C10p
PFNC_Coord3D_C12p = _FAI_python.PFNC_Coord3D_C12p
PFNC_Coord3D_C16 = _FAI_python.PFNC_Coord3D_C16
PFNC_Coord3D_C32f = _FAI_python.PFNC_Coord3D_C32f
PFNC_Coord3D_C64f = _FAI_python.PFNC_Coord3D_C64f
PFNC_Confidence1 = _FAI_python.PFNC_Confidence1
PFNC_Confidence1p = _FAI_python.PFNC_Confidence1p
PFNC_Confidence8 = _FAI_python.PFNC_Confidence8
PFNC_Confidence16 = _FAI_python.PFNC_Confidence16
PFNC_Confidence32f = _FAI_python.PFNC_Confidence32f
PFNC_BiColorBGRG8 = _FAI_python.PFNC_BiColorBGRG8
PFNC_BiColorBGRG10 = _FAI_python.PFNC_BiColorBGRG10
PFNC_BiColorBGRG10p = _FAI_python.PFNC_BiColorBGRG10p
PFNC_BiColorBGRG12 = _FAI_python.PFNC_BiColorBGRG12
PFNC_BiColorBGRG12p = _FAI_python.PFNC_BiColorBGRG12p
PFNC_BiColorRGBG8 = _FAI_python.PFNC_BiColorRGBG8
PFNC_BiColorRGBG10 = _FAI_python.PFNC_BiColorRGBG10
PFNC_BiColorRGBG10p = _FAI_python.PFNC_BiColorRGBG10p
PFNC_BiColorRGBG12 = _FAI_python.PFNC_BiColorRGBG12
PFNC_BiColorRGBG12p = _FAI_python.PFNC_BiColorRGBG12p
PFNC_Data8 = _FAI_python.PFNC_Data8
PFNC_Data8s = _FAI_python.PFNC_Data8s
PFNC_Data16 = _FAI_python.PFNC_Data16
PFNC_Data16s = _FAI_python.PFNC_Data16s
PFNC_Data32 = _FAI_python.PFNC_Data32
PFNC_Data32f = _FAI_python.PFNC_Data32f
PFNC_Data32s = _FAI_python.PFNC_Data32s
PFNC_Data64 = _FAI_python.PFNC_Data64
PFNC_Data64f = _FAI_python.PFNC_Data64f
PFNC_Data64s = _FAI_python.PFNC_Data64s
PFNC_SCF1WBWG8 = _FAI_python.PFNC_SCF1WBWG8
PFNC_SCF1WBWG10 = _FAI_python.PFNC_SCF1WBWG10
PFNC_SCF1WBWG10p = _FAI_python.PFNC_SCF1WBWG10p
PFNC_SCF1WBWG12 = _FAI_python.PFNC_SCF1WBWG12
PFNC_SCF1WBWG12p = _FAI_python.PFNC_SCF1WBWG12p
PFNC_SCF1WBWG14 = _FAI_python.PFNC_SCF1WBWG14
PFNC_SCF1WBWG16 = _FAI_python.PFNC_SCF1WBWG16
PFNC_SCF1WGWB8 = _FAI_python.PFNC_SCF1WGWB8
PFNC_SCF1WGWB10 = _FAI_python.PFNC_SCF1WGWB10
PFNC_SCF1WGWB10p = _FAI_python.PFNC_SCF1WGWB10p
PFNC_SCF1WGWB12 = _FAI_python.PFNC_SCF1WGWB12
PFNC_SCF1WGWB12p = _FAI_python.PFNC_SCF1WGWB12p
PFNC_SCF1WGWB14 = _FAI_python.PFNC_SCF1WGWB14
PFNC_SCF1WGWB16 = _FAI_python.PFNC_SCF1WGWB16
PFNC_SCF1WGWR8 = _FAI_python.PFNC_SCF1WGWR8
PFNC_SCF1WGWR10 = _FAI_python.PFNC_SCF1WGWR10
PFNC_SCF1WGWR10p = _FAI_python.PFNC_SCF1WGWR10p
PFNC_SCF1WGWR12 = _FAI_python.PFNC_SCF1WGWR12
PFNC_SCF1WGWR12p = _FAI_python.PFNC_SCF1WGWR12p
PFNC_SCF1WGWR14 = _FAI_python.PFNC_SCF1WGWR14
PFNC_SCF1WGWR16 = _FAI_python.PFNC_SCF1WGWR16
PFNC_SCF1WRWG8 = _FAI_python.PFNC_SCF1WRWG8
PFNC_SCF1WRWG10 = _FAI_python.PFNC_SCF1WRWG10
PFNC_SCF1WRWG10p = _FAI_python.PFNC_SCF1WRWG10p
PFNC_SCF1WRWG12 = _FAI_python.PFNC_SCF1WRWG12
PFNC_SCF1WRWG12p = _FAI_python.PFNC_SCF1WRWG12p
PFNC_SCF1WRWG14 = _FAI_python.PFNC_SCF1WRWG14
PFNC_SCF1WRWG16 = _FAI_python.PFNC_SCF1WRWG16
PFNC_YCbCr8 = _FAI_python.PFNC_YCbCr8
PFNC_YCbCr8_CbYCr = _FAI_python.PFNC_YCbCr8_CbYCr
PFNC_YCbCr10_CbYCr = _FAI_python.PFNC_YCbCr10_CbYCr
PFNC_YCbCr10p_CbYCr = _FAI_python.PFNC_YCbCr10p_CbYCr
PFNC_YCbCr12_CbYCr = _FAI_python.PFNC_YCbCr12_CbYCr
PFNC_YCbCr12p_CbYCr = _FAI_python.PFNC_YCbCr12p_CbYCr
PFNC_YCbCr411_8 = _FAI_python.PFNC_YCbCr411_8
PFNC_YCbCr411_8_CbYYCrYY = _FAI_python.PFNC_YCbCr411_8_CbYYCrYY
PFNC_YCbCr420_8_YY_CbCr_Semiplanar = _FAI_python.PFNC_YCbCr420_8_YY_CbCr_Semiplanar
PFNC_YCbCr420_8_YY_CrCb_Semiplanar = _FAI_python.PFNC_YCbCr420_8_YY_CrCb_Semiplanar
PFNC_YCbCr422_8 = _FAI_python.PFNC_YCbCr422_8
PFNC_YCbCr422_8_CbYCrY = _FAI_python.PFNC_YCbCr422_8_CbYCrY
PFNC_YCbCr422_8_YY_CbCr_Semiplanar = _FAI_python.PFNC_YCbCr422_8_YY_CbCr_Semiplanar
PFNC_YCbCr422_8_YY_CrCb_Semiplanar = _FAI_python.PFNC_YCbCr422_8_YY_CrCb_Semiplanar
PFNC_YCbCr422_10 = _FAI_python.PFNC_YCbCr422_10
PFNC_YCbCr422_10_CbYCrY = _FAI_python.PFNC_YCbCr422_10_CbYCrY
PFNC_YCbCr422_10p = _FAI_python.PFNC_YCbCr422_10p
PFNC_YCbCr422_10p_CbYCrY = _FAI_python.PFNC_YCbCr422_10p_CbYCrY
PFNC_YCbCr422_12 = _FAI_python.PFNC_YCbCr422_12
PFNC_YCbCr422_12_CbYCrY = _FAI_python.PFNC_YCbCr422_12_CbYCrY
PFNC_YCbCr422_12p = _FAI_python.PFNC_YCbCr422_12p
PFNC_YCbCr422_12p_CbYCrY = _FAI_python.PFNC_YCbCr422_12p_CbYCrY
PFNC_YCbCr601_8_CbYCr = _FAI_python.PFNC_YCbCr601_8_CbYCr
PFNC_YCbCr601_10_CbYCr = _FAI_python.PFNC_YCbCr601_10_CbYCr
PFNC_YCbCr601_10p_CbYCr = _FAI_python.PFNC_YCbCr601_10p_CbYCr
PFNC_YCbCr601_12_CbYCr = _FAI_python.PFNC_YCbCr601_12_CbYCr
PFNC_YCbCr601_12p_CbYCr = _FAI_python.PFNC_YCbCr601_12p_CbYCr
PFNC_YCbCr601_411_8_CbYYCrYY = _FAI_python.PFNC_YCbCr601_411_8_CbYYCrYY
PFNC_YCbCr601_422_8 = _FAI_python.PFNC_YCbCr601_422_8
PFNC_YCbCr601_422_8_CbYCrY = _FAI_python.PFNC_YCbCr601_422_8_CbYCrY
PFNC_YCbCr601_422_10 = _FAI_python.PFNC_YCbCr601_422_10
PFNC_YCbCr601_422_10_CbYCrY = _FAI_python.PFNC_YCbCr601_422_10_CbYCrY
PFNC_YCbCr601_422_10p = _FAI_python.PFNC_YCbCr601_422_10p
PFNC_YCbCr601_422_10p_CbYCrY = _FAI_python.PFNC_YCbCr601_422_10p_CbYCrY
PFNC_YCbCr601_422_12 = _FAI_python.PFNC_YCbCr601_422_12
PFNC_YCbCr601_422_12_CbYCrY = _FAI_python.PFNC_YCbCr601_422_12_CbYCrY
PFNC_YCbCr601_422_12p = _FAI_python.PFNC_YCbCr601_422_12p
PFNC_YCbCr601_422_12p_CbYCrY = _FAI_python.PFNC_YCbCr601_422_12p_CbYCrY
PFNC_YCbCr709_8_CbYCr = _FAI_python.PFNC_YCbCr709_8_CbYCr
PFNC_YCbCr709_10_CbYCr = _FAI_python.PFNC_YCbCr709_10_CbYCr
PFNC_YCbCr709_10p_CbYCr = _FAI_python.PFNC_YCbCr709_10p_CbYCr
PFNC_YCbCr709_12_CbYCr = _FAI_python.PFNC_YCbCr709_12_CbYCr
PFNC_YCbCr709_12p_CbYCr = _FAI_python.PFNC_YCbCr709_12p_CbYCr
PFNC_YCbCr709_411_8_CbYYCrYY = _FAI_python.PFNC_YCbCr709_411_8_CbYYCrYY
PFNC_YCbCr709_422_8 = _FAI_python.PFNC_YCbCr709_422_8
PFNC_YCbCr709_422_8_CbYCrY = _FAI_python.PFNC_YCbCr709_422_8_CbYCrY
PFNC_YCbCr709_422_10 = _FAI_python.PFNC_YCbCr709_422_10
PFNC_YCbCr709_422_10_CbYCrY = _FAI_python.PFNC_YCbCr709_422_10_CbYCrY
PFNC_YCbCr709_422_10p = _FAI_python.PFNC_YCbCr709_422_10p
PFNC_YCbCr709_422_10p_CbYCrY = _FAI_python.PFNC_YCbCr709_422_10p_CbYCrY
PFNC_YCbCr709_422_12 = _FAI_python.PFNC_YCbCr709_422_12
PFNC_YCbCr709_422_12_CbYCrY = _FAI_python.PFNC_YCbCr709_422_12_CbYCrY
PFNC_YCbCr709_422_12p = _FAI_python.PFNC_YCbCr709_422_12p
PFNC_YCbCr709_422_12p_CbYCrY = _FAI_python.PFNC_YCbCr709_422_12p_CbYCrY
PFNC_YCbCr2020_8_CbYCr = _FAI_python.PFNC_YCbCr2020_8_CbYCr
PFNC_YCbCr2020_10_CbYCr = _FAI_python.PFNC_YCbCr2020_10_CbYCr
PFNC_YCbCr2020_10p_CbYCr = _FAI_python.PFNC_YCbCr2020_10p_CbYCr
PFNC_YCbCr2020_12_CbYCr = _FAI_python.PFNC_YCbCr2020_12_CbYCr
PFNC_YCbCr2020_12p_CbYCr = _FAI_python.PFNC_YCbCr2020_12p_CbYCr
PFNC_YCbCr2020_411_8_CbYYCrYY = _FAI_python.PFNC_YCbCr2020_411_8_CbYYCrYY
PFNC_YCbCr2020_422_8 = _FAI_python.PFNC_YCbCr2020_422_8
PFNC_YCbCr2020_422_8_CbYCrY = _FAI_python.PFNC_YCbCr2020_422_8_CbYCrY
PFNC_YCbCr2020_422_10 = _FAI_python.PFNC_YCbCr2020_422_10
PFNC_YCbCr2020_422_10_CbYCrY = _FAI_python.PFNC_YCbCr2020_422_10_CbYCrY
PFNC_YCbCr2020_422_10p = _FAI_python.PFNC_YCbCr2020_422_10p
PFNC_YCbCr2020_422_10p_CbYCrY = _FAI_python.PFNC_YCbCr2020_422_10p_CbYCrY
PFNC_YCbCr2020_422_12 = _FAI_python.PFNC_YCbCr2020_422_12
PFNC_YCbCr2020_422_12_CbYCrY = _FAI_python.PFNC_YCbCr2020_422_12_CbYCrY
PFNC_YCbCr2020_422_12p = _FAI_python.PFNC_YCbCr2020_422_12p
PFNC_YCbCr2020_422_12p_CbYCrY = _FAI_python.PFNC_YCbCr2020_422_12p_CbYCrY
PFNC_YUV8_UYV = _FAI_python.PFNC_YUV8_UYV
PFNC_YUV411_8_UYYVYY = _FAI_python.PFNC_YUV411_8_UYYVYY
PFNC_YUV422_8 = _FAI_python.PFNC_YUV422_8
PFNC_YUV422_8_UYVY = _FAI_python.PFNC_YUV422_8_UYVY
GVSP_Mono10Packed = _FAI_python.GVSP_Mono10Packed
GVSP_Mono12Packed = _FAI_python.GVSP_Mono12Packed
GVSP_BayerBG10Packed = _FAI_python.GVSP_BayerBG10Packed
GVSP_BayerBG12Packed = _FAI_python.GVSP_BayerBG12Packed
GVSP_BayerGB10Packed = _FAI_python.GVSP_BayerGB10Packed
GVSP_BayerGB12Packed = _FAI_python.GVSP_BayerGB12Packed
GVSP_BayerGR10Packed = _FAI_python.GVSP_BayerGR10Packed
GVSP_BayerGR12Packed = _FAI_python.GVSP_BayerGR12Packed
GVSP_BayerRG10Packed = _FAI_python.GVSP_BayerRG10Packed
GVSP_BayerRG12Packed = _FAI_python.GVSP_BayerRG12Packed
GVSP_RGB10V1Packed = _FAI_python.GVSP_RGB10V1Packed
GVSP_RGB12V1Packed = _FAI_python.GVSP_RGB12V1Packed
Mono1p = _FAI_python.Mono1p
Mono2p = _FAI_python.Mono2p
Mono4p = _FAI_python.Mono4p
Mono8 = _FAI_python.Mono8
Mono8s = _FAI_python.Mono8s
Mono10 = _FAI_python.Mono10
Mono10p = _FAI_python.Mono10p
Mono12 = _FAI_python.Mono12
Mono12p = _FAI_python.Mono12p
Mono14 = _FAI_python.Mono14
Mono14p = _FAI_python.Mono14p
Mono16 = _FAI_python.Mono16
Mono32 = _FAI_python.Mono32
BayerBG4p = _FAI_python.BayerBG4p
BayerBG8 = _FAI_python.BayerBG8
BayerBG10 = _FAI_python.BayerBG10
BayerBG10p = _FAI_python.BayerBG10p
BayerBG12 = _FAI_python.BayerBG12
BayerBG12p = _FAI_python.BayerBG12p
BayerBG14 = _FAI_python.BayerBG14
BayerBG14p = _FAI_python.BayerBG14p
BayerBG16 = _FAI_python.BayerBG16
BayerGB4p = _FAI_python.BayerGB4p
BayerGB8 = _FAI_python.BayerGB8
BayerGB10 = _FAI_python.BayerGB10
BayerGB10p = _FAI_python.BayerGB10p
BayerGB12 = _FAI_python.BayerGB12
BayerGB12p = _FAI_python.BayerGB12p
BayerGB14 = _FAI_python.BayerGB14
BayerGB14p = _FAI_python.BayerGB14p
BayerGB16 = _FAI_python.BayerGB16
BayerGR4p = _FAI_python.BayerGR4p
BayerGR8 = _FAI_python.BayerGR8
BayerGR10 = _FAI_python.BayerGR10
BayerGR10p = _FAI_python.BayerGR10p
BayerGR12 = _FAI_python.BayerGR12
BayerGR12p = _FAI_python.BayerGR12p
BayerGR14 = _FAI_python.BayerGR14
BayerGR14p = _FAI_python.BayerGR14p
BayerGR16 = _FAI_python.BayerGR16
BayerRG4p = _FAI_python.BayerRG4p
BayerRG8 = _FAI_python.BayerRG8
BayerRG10 = _FAI_python.BayerRG10
BayerRG10p = _FAI_python.BayerRG10p
BayerRG12 = _FAI_python.BayerRG12
BayerRG12p = _FAI_python.BayerRG12p
BayerRG14 = _FAI_python.BayerRG14
BayerRG14p = _FAI_python.BayerRG14p
BayerRG16 = _FAI_python.BayerRG16
RGBa8 = _FAI_python.RGBa8
RGBa10 = _FAI_python.RGBa10
RGBa10p = _FAI_python.RGBa10p
RGBa12 = _FAI_python.RGBa12
RGBa12p = _FAI_python.RGBa12p
RGBa14 = _FAI_python.RGBa14
RGBa16 = _FAI_python.RGBa16
RGB8 = _FAI_python.RGB8
RGB8_Planar = _FAI_python.RGB8_Planar
RGB10 = _FAI_python.RGB10
RGB10_Planar = _FAI_python.RGB10_Planar
RGB10p = _FAI_python.RGB10p
RGB10p32 = _FAI_python.RGB10p32
RGB12 = _FAI_python.RGB12
RGB12_Planar = _FAI_python.RGB12_Planar
RGB12p = _FAI_python.RGB12p
RGB14 = _FAI_python.RGB14
RGB16 = _FAI_python.RGB16
RGB16_Planar = _FAI_python.RGB16_Planar
RGB565p = _FAI_python.RGB565p
BGRa8 = _FAI_python.BGRa8
BGRa10 = _FAI_python.BGRa10
BGRa10p = _FAI_python.BGRa10p
BGRa12 = _FAI_python.BGRa12
BGRa12p = _FAI_python.BGRa12p
BGRa14 = _FAI_python.BGRa14
BGRa16 = _FAI_python.BGRa16
BGR8 = _FAI_python.BGR8
BGR10 = _FAI_python.BGR10
BGR10p = _FAI_python.BGR10p
BGR12 = _FAI_python.BGR12
BGR12p = _FAI_python.BGR12p
BGR14 = _FAI_python.BGR14
BGR16 = _FAI_python.BGR16
BGR565p = _FAI_python.BGR565p
R8 = _FAI_python.R8
R10 = _FAI_python.R10
R10_Deprecated = _FAI_python.R10_Deprecated
R12 = _FAI_python.R12
R12_Deprecated = _FAI_python.R12_Deprecated
R16 = _FAI_python.R16
G8 = _FAI_python.G8
G10 = _FAI_python.G10
G10_Deprecated = _FAI_python.G10_Deprecated
G12 = _FAI_python.G12
G12_Deprecated = _FAI_python.G12_Deprecated
G16 = _FAI_python.G16
B8 = _FAI_python.B8
B10 = _FAI_python.B10
B10_Deprecated = _FAI_python.B10_Deprecated
B12 = _FAI_python.B12
B12_Deprecated = _FAI_python.B12_Deprecated
B16 = _FAI_python.B16
Coord3D_ABC8 = _FAI_python.Coord3D_ABC8
Coord3D_ABC8_Planar = _FAI_python.Coord3D_ABC8_Planar
Coord3D_ABC10p = _FAI_python.Coord3D_ABC10p
Coord3D_ABC10p_Planar = _FAI_python.Coord3D_ABC10p_Planar
Coord3D_ABC12p = _FAI_python.Coord3D_ABC12p
Coord3D_ABC12p_Planar = _FAI_python.Coord3D_ABC12p_Planar
Coord3D_ABC16 = _FAI_python.Coord3D_ABC16
Coord3D_ABC16_Planar = _FAI_python.Coord3D_ABC16_Planar
Coord3D_ABC32f = _FAI_python.Coord3D_ABC32f
Coord3D_ABC32f_Planar = _FAI_python.Coord3D_ABC32f_Planar
Coord3D_ABC64f = _FAI_python.Coord3D_ABC64f
Coord3D_ABC64f_Planar = _FAI_python.Coord3D_ABC64f_Planar
Coord3D_AC8 = _FAI_python.Coord3D_AC8
Coord3D_AC8_Planar = _FAI_python.Coord3D_AC8_Planar
Coord3D_AC10p = _FAI_python.Coord3D_AC10p
Coord3D_AC10p_Planar = _FAI_python.Coord3D_AC10p_Planar
Coord3D_AC12p = _FAI_python.Coord3D_AC12p
Coord3D_AC12p_Planar = _FAI_python.Coord3D_AC12p_Planar
Coord3D_AC16 = _FAI_python.Coord3D_AC16
Coord3D_AC16_Planar = _FAI_python.Coord3D_AC16_Planar
Coord3D_AC32f = _FAI_python.Coord3D_AC32f
Coord3D_AC32f_Planar = _FAI_python.Coord3D_AC32f_Planar
Coord3D_AC64f = _FAI_python.Coord3D_AC64f
Coord3D_AC64f_Planar = _FAI_python.Coord3D_AC64f_Planar
Coord3D_A8 = _FAI_python.Coord3D_A8
Coord3D_A10p = _FAI_python.Coord3D_A10p
Coord3D_A12p = _FAI_python.Coord3D_A12p
Coord3D_A16 = _FAI_python.Coord3D_A16
Coord3D_A32f = _FAI_python.Coord3D_A32f
Coord3D_A64f = _FAI_python.Coord3D_A64f
Coord3D_B8 = _FAI_python.Coord3D_B8
Coord3D_B10p = _FAI_python.Coord3D_B10p
Coord3D_B12p = _FAI_python.Coord3D_B12p
Coord3D_B16 = _FAI_python.Coord3D_B16
Coord3D_B32f = _FAI_python.Coord3D_B32f
Coord3D_B64f = _FAI_python.Coord3D_B64f
Coord3D_C8 = _FAI_python.Coord3D_C8
Coord3D_C10p = _FAI_python.Coord3D_C10p
Coord3D_C12p = _FAI_python.Coord3D_C12p
Coord3D_C16 = _FAI_python.Coord3D_C16
Coord3D_C32f = _FAI_python.Coord3D_C32f
Coord3D_C64f = _FAI_python.Coord3D_C64f
Confidence1 = _FAI_python.Confidence1
Confidence1p = _FAI_python.Confidence1p
Confidence8 = _FAI_python.Confidence8
Confidence16 = _FAI_python.Confidence16
Confidence32f = _FAI_python.Confidence32f
BiColorBGRG8 = _FAI_python.BiColorBGRG8
BiColorBGRG10 = _FAI_python.BiColorBGRG10
BiColorBGRG10p = _FAI_python.BiColorBGRG10p
BiColorBGRG12 = _FAI_python.BiColorBGRG12
BiColorBGRG12p = _FAI_python.BiColorBGRG12p
BiColorRGBG8 = _FAI_python.BiColorRGBG8
BiColorRGBG10 = _FAI_python.BiColorRGBG10
BiColorRGBG10p = _FAI_python.BiColorRGBG10p
BiColorRGBG12 = _FAI_python.BiColorRGBG12
BiColorRGBG12p = _FAI_python.BiColorRGBG12p
Data8 = _FAI_python.Data8
Data8s = _FAI_python.Data8s
Data16 = _FAI_python.Data16
Data16s = _FAI_python.Data16s
Data32 = _FAI_python.Data32
Data32f = _FAI_python.Data32f
Data32s = _FAI_python.Data32s
Data64 = _FAI_python.Data64
Data64f = _FAI_python.Data64f
Data64s = _FAI_python.Data64s
SCF1WBWG8 = _FAI_python.SCF1WBWG8
SCF1WBWG10 = _FAI_python.SCF1WBWG10
SCF1WBWG10p = _FAI_python.SCF1WBWG10p
SCF1WBWG12 = _FAI_python.SCF1WBWG12
SCF1WBWG12p = _FAI_python.SCF1WBWG12p
SCF1WBWG14 = _FAI_python.SCF1WBWG14
SCF1WBWG16 = _FAI_python.SCF1WBWG16
SCF1WGWB8 = _FAI_python.SCF1WGWB8
SCF1WGWB10 = _FAI_python.SCF1WGWB10
SCF1WGWB10p = _FAI_python.SCF1WGWB10p
SCF1WGWB12 = _FAI_python.SCF1WGWB12
SCF1WGWB12p = _FAI_python.SCF1WGWB12p
SCF1WGWB14 = _FAI_python.SCF1WGWB14
SCF1WGWB16 = _FAI_python.SCF1WGWB16
SCF1WGWR8 = _FAI_python.SCF1WGWR8
SCF1WGWR10 = _FAI_python.SCF1WGWR10
SCF1WGWR10p = _FAI_python.SCF1WGWR10p
SCF1WGWR12 = _FAI_python.SCF1WGWR12
SCF1WGWR12p = _FAI_python.SCF1WGWR12p
SCF1WGWR14 = _FAI_python.SCF1WGWR14
SCF1WGWR16 = _FAI_python.SCF1WGWR16
SCF1WRWG8 = _FAI_python.SCF1WRWG8
SCF1WRWG10 = _FAI_python.SCF1WRWG10
SCF1WRWG10p = _FAI_python.SCF1WRWG10p
SCF1WRWG12 = _FAI_python.SCF1WRWG12
SCF1WRWG12p = _FAI_python.SCF1WRWG12p
SCF1WRWG14 = _FAI_python.SCF1WRWG14
SCF1WRWG16 = _FAI_python.SCF1WRWG16
YCbCr8 = _FAI_python.YCbCr8
YCbCr8_CbYCr = _FAI_python.YCbCr8_CbYCr
YCbCr10_CbYCr = _FAI_python.YCbCr10_CbYCr
YCbCr10p_CbYCr = _FAI_python.YCbCr10p_CbYCr
YCbCr12_CbYCr = _FAI_python.YCbCr12_CbYCr
YCbCr12p_CbYCr = _FAI_python.YCbCr12p_CbYCr
YCbCr411_8 = _FAI_python.YCbCr411_8
YCbCr411_8_CbYYCrYY = _FAI_python.YCbCr411_8_CbYYCrYY
YCbCr420_8_YY_CbCr_Semiplanar = _FAI_python.YCbCr420_8_YY_CbCr_Semiplanar
YCbCr420_8_YY_CrCb_Semiplanar = _FAI_python.YCbCr420_8_YY_CrCb_Semiplanar
YCbCr422_8 = _FAI_python.YCbCr422_8
YCbCr422_8_CbYCrY = _FAI_python.YCbCr422_8_CbYCrY
YCbCr422_8_YY_CbCr_Semiplanar = _FAI_python.YCbCr422_8_YY_CbCr_Semiplanar
YCbCr422_8_YY_CrCb_Semiplanar = _FAI_python.YCbCr422_8_YY_CrCb_Semiplanar
YCbCr422_10 = _FAI_python.YCbCr422_10
YCbCr422_10_CbYCrY = _FAI_python.YCbCr422_10_CbYCrY
YCbCr422_10p = _FAI_python.YCbCr422_10p
YCbCr422_10p_CbYCrY = _FAI_python.YCbCr422_10p_CbYCrY
YCbCr422_12 = _FAI_python.YCbCr422_12
YCbCr422_12_CbYCrY = _FAI_python.YCbCr422_12_CbYCrY
YCbCr422_12p = _FAI_python.YCbCr422_12p
YCbCr422_12p_CbYCrY = _FAI_python.YCbCr422_12p_CbYCrY
YCbCr601_8_CbYCr = _FAI_python.YCbCr601_8_CbYCr
YCbCr601_10_CbYCr = _FAI_python.YCbCr601_10_CbYCr
YCbCr601_10p_CbYCr = _FAI_python.YCbCr601_10p_CbYCr
YCbCr601_12_CbYCr = _FAI_python.YCbCr601_12_CbYCr
YCbCr601_12p_CbYCr = _FAI_python.YCbCr601_12p_CbYCr
YCbCr601_411_8_CbYYCrYY = _FAI_python.YCbCr601_411_8_CbYYCrYY
YCbCr601_422_8 = _FAI_python.YCbCr601_422_8
YCbCr601_422_8_CbYCrY = _FAI_python.YCbCr601_422_8_CbYCrY
YCbCr601_422_10 = _FAI_python.YCbCr601_422_10
YCbCr601_422_10_CbYCrY = _FAI_python.YCbCr601_422_10_CbYCrY
YCbCr601_422_10p = _FAI_python.YCbCr601_422_10p
YCbCr601_422_10p_CbYCrY = _FAI_python.YCbCr601_422_10p_CbYCrY
YCbCr601_422_12 = _FAI_python.YCbCr601_422_12
YCbCr601_422_12_CbYCrY = _FAI_python.YCbCr601_422_12_CbYCrY
YCbCr601_422_12p = _FAI_python.YCbCr601_422_12p
YCbCr601_422_12p_CbYCrY = _FAI_python.YCbCr601_422_12p_CbYCrY
YCbCr709_8_CbYCr = _FAI_python.YCbCr709_8_CbYCr
YCbCr709_10_CbYCr = _FAI_python.YCbCr709_10_CbYCr
YCbCr709_10p_CbYCr = _FAI_python.YCbCr709_10p_CbYCr
YCbCr709_12_CbYCr = _FAI_python.YCbCr709_12_CbYCr
YCbCr709_12p_CbYCr = _FAI_python.YCbCr709_12p_CbYCr
YCbCr709_411_8_CbYYCrYY = _FAI_python.YCbCr709_411_8_CbYYCrYY
YCbCr709_422_8 = _FAI_python.YCbCr709_422_8
YCbCr709_422_8_CbYCrY = _FAI_python.YCbCr709_422_8_CbYCrY
YCbCr709_422_10 = _FAI_python.YCbCr709_422_10
YCbCr709_422_10_CbYCrY = _FAI_python.YCbCr709_422_10_CbYCrY
YCbCr709_422_10p = _FAI_python.YCbCr709_422_10p
YCbCr709_422_10p_CbYCrY = _FAI_python.YCbCr709_422_10p_CbYCrY
YCbCr709_422_12 = _FAI_python.YCbCr709_422_12
YCbCr709_422_12_CbYCrY = _FAI_python.YCbCr709_422_12_CbYCrY
YCbCr709_422_12p = _FAI_python.YCbCr709_422_12p
YCbCr709_422_12p_CbYCrY = _FAI_python.YCbCr709_422_12p_CbYCrY
YCbCr2020_8_CbYCr = _FAI_python.YCbCr2020_8_CbYCr
YCbCr2020_10_CbYCr = _FAI_python.YCbCr2020_10_CbYCr
YCbCr2020_10p_CbYCr = _FAI_python.YCbCr2020_10p_CbYCr
YCbCr2020_12_CbYCr = _FAI_python.YCbCr2020_12_CbYCr
YCbCr2020_12p_CbYCr = _FAI_python.YCbCr2020_12p_CbYCr
YCbCr2020_411_8_CbYYCrYY = _FAI_python.YCbCr2020_411_8_CbYYCrYY
YCbCr2020_422_8 = _FAI_python.YCbCr2020_422_8
YCbCr2020_422_8_CbYCrY = _FAI_python.YCbCr2020_422_8_CbYCrY
YCbCr2020_422_10 = _FAI_python.YCbCr2020_422_10
YCbCr2020_422_10_CbYCrY = _FAI_python.YCbCr2020_422_10_CbYCrY
YCbCr2020_422_10p = _FAI_python.YCbCr2020_422_10p
YCbCr2020_422_10p_CbYCrY = _FAI_python.YCbCr2020_422_10p_CbYCrY
YCbCr2020_422_12 = _FAI_python.YCbCr2020_422_12
YCbCr2020_422_12_CbYCrY = _FAI_python.YCbCr2020_422_12_CbYCrY
YCbCr2020_422_12p = _FAI_python.YCbCr2020_422_12p
YCbCr2020_422_12p_CbYCrY = _FAI_python.YCbCr2020_422_12p_CbYCrY
YUV8_UYV = _FAI_python.YUV8_UYV
YUV411_8_UYYVYY = _FAI_python.YUV411_8_UYYVYY
YUV422_8 = _FAI_python.YUV422_8
YUV422_8_UYVY = _FAI_python.YUV422_8_UYVY
Mono10Packed = _FAI_python.Mono10Packed
Mono12Packed = _FAI_python.Mono12Packed
BayerBG10Packed = _FAI_python.BayerBG10Packed
BayerBG12Packed = _FAI_python.BayerBG12Packed
BayerGB10Packed = _FAI_python.BayerGB10Packed
BayerGB12Packed = _FAI_python.BayerGB12Packed
BayerGR10Packed = _FAI_python.BayerGR10Packed
BayerGR12Packed = _FAI_python.BayerGR12Packed
BayerRG10Packed = _FAI_python.BayerRG10Packed
BayerRG12Packed = _FAI_python.BayerRG12Packed
RGB10V1Packed = _FAI_python.RGB10V1Packed
RGB12V1Packed = _FAI_python.RGB12V1Packed
InvalidPixelFormat = _FAI_python.InvalidPixelFormat
PFNC_CUSTOM = _FAI_python.PFNC_CUSTOM
PFNC_SINGLE_COMPONENT = _FAI_python.PFNC_SINGLE_COMPONENT
PFNC_MULTIPLE_COMPONENT = _FAI_python.PFNC_MULTIPLE_COMPONENT
PFNC_COMPONENT_MASK = _FAI_python.PFNC_COMPONENT_MASK
PFNC_OCCUPY1BIT = _FAI_python.PFNC_OCCUPY1BIT
PFNC_OCCUPY2BIT = _FAI_python.PFNC_OCCUPY2BIT
PFNC_OCCUPY4BIT = _FAI_python.PFNC_OCCUPY4BIT
PFNC_OCCUPY8BIT = _FAI_python.PFNC_OCCUPY8BIT
PFNC_OCCUPY10BIT = _FAI_python.PFNC_OCCUPY10BIT
PFNC_OCCUPY12BIT = _FAI_python.PFNC_OCCUPY12BIT
PFNC_OCCUPY16BIT = _FAI_python.PFNC_OCCUPY16BIT
PFNC_OCCUPY24BIT = _FAI_python.PFNC_OCCUPY24BIT
PFNC_OCCUPY30BIT = _FAI_python.PFNC_OCCUPY30BIT
PFNC_OCCUPY32BIT = _FAI_python.PFNC_OCCUPY32BIT
PFNC_OCCUPY36BIT = _FAI_python.PFNC_OCCUPY36BIT
PFNC_OCCUPY40BIT = _FAI_python.PFNC_OCCUPY40BIT
PFNC_OCCUPY48BIT = _FAI_python.PFNC_OCCUPY48BIT
PFNC_OCCUPY64BIT = _FAI_python.PFNC_OCCUPY64BIT
PFNC_PIXEL_SIZE_MASK = _FAI_python.PFNC_PIXEL_SIZE_MASK
PFNC_PIXEL_SIZE_SHIFT = _FAI_python.PFNC_PIXEL_SIZE_SHIFT
PFNC_PIXEL_ID_MASK = _FAI_python.PFNC_PIXEL_ID_MASK
PFNC_INCLUDE_HELPERS = _FAI_python.PFNC_INCLUDE_HELPERS

def GetPixelFormatName(format):
    return _FAI_python.GetPixelFormatName(format)

def GetPixelFormatDescription(format):
    return _FAI_python.GetPixelFormatDescription(format)

def GetBuffer(pResult):
    return _FAI_python.GetBuffer(pResult)

def GetBufferFromImageInfo(pResult):
    return _FAI_python.GetBufferFromImageInfo(pResult)

def FABooleanGetValueByBool(handle):
    return _FAI_python.FABooleanGetValueByBool(handle)
Custom = _FAI_python.Custom
Standard = _FAI_python.Standard
_UndefinedNameSpace = _FAI_python._UndefinedNameSpace
Beginner = _FAI_python.Beginner
Expert = _FAI_python.Expert
Guru = _FAI_python.Guru
Invisible = _FAI_python.Invisible
_UndefinedVisibility = _FAI_python._UndefinedVisibility
NoCache = _FAI_python.NoCache
WriteThrough = _FAI_python.WriteThrough
WriteAround = _FAI_python.WriteAround
_UndefinedCachingMode = _FAI_python._UndefinedCachingMode
NI = _FAI_python.NI
NA = _FAI_python.NA
WO = _FAI_python.WO
RO = _FAI_python.RO
RW = _FAI_python.RW
_UndefinedAccesMode = _FAI_python._UndefinedAccesMode
_CycleDetectAccesMode = _FAI_python._CycleDetectAccesMode
ValueNode = _FAI_python.ValueNode
BaseNode = _FAI_python.BaseNode
IntegerNode = _FAI_python.IntegerNode
BooleanNode = _FAI_python.BooleanNode
CommandNode = _FAI_python.CommandNode
FloatNode = _FAI_python.FloatNode
StringNode = _FAI_python.StringNode
RegisterNode = _FAI_python.RegisterNode
CategoryNode = _FAI_python.CategoryNode
EnumerationNode = _FAI_python.EnumerationNode
EnumEntryNode = _FAI_python.EnumEntryNode
PortNode = _FAI_python.PortNode
_UnknownNode = _FAI_python._UnknownNode
Linear = _FAI_python.Linear
Logarithmic = _FAI_python.Logarithmic
Boolean = _FAI_python.Boolean
PureNumber = _FAI_python.PureNumber
HexNumber = _FAI_python.HexNumber
IPV4Address = _FAI_python.IPV4Address
MACAddress = _FAI_python.MACAddress
_UndefinedRepresentation = _FAI_python._UndefinedRepresentation
GENAPI_C_ERROR_SUCCESS = _FAI_python.GENAPI_C_ERROR_SUCCESS
GENAPI_C_ERROR_INVALID_ARG = _FAI_python.GENAPI_C_ERROR_INVALID_ARG
GENAPI_C_ERROR_INVALID_HANDLE = _FAI_python.GENAPI_C_ERROR_INVALID_HANDLE
GENAPI_C_ERROR_INVALID_BUFFER = _FAI_python.GENAPI_C_ERROR_INVALID_BUFFER
GENAPI_C_ERROR_NODE_NOT_FOUND = _FAI_python.GENAPI_C_ERROR_NODE_NOT_FOUND
GENAPI_C_ERROR_INVALID_ACCESS = _FAI_python.GENAPI_C_ERROR_INVALID_ACCESS
GENAPI_C_ERROR_INVALID_INDEX = _FAI_python.GENAPI_C_ERROR_INVALID_INDEX

def FANodeMapGetNode(mapHandle, name):
    return _FAI_python.FANodeMapGetNode(mapHandle, name)

def FANodeMapGetNumNodes(mapHandle, num):
    return _FAI_python.FANodeMapGetNumNodes(mapHandle, num)

def FANodeMapGetNodeByIndex(mapHandle, index):
    return _FAI_python.FANodeMapGetNodeByIndex(mapHandle, index)

def FANodeMapPoll(mapHandle, ElapsedTime):
    return _FAI_python.FANodeMapPoll(mapHandle, ElapsedTime)

def FANodeGetName(handle, buf, bufLen):
    return _FAI_python.FANodeGetName(handle, buf, bufLen)

def FANodeGetNameSpace(handle, nameSpace):
    return _FAI_python.FANodeGetNameSpace(handle, nameSpace)

def FANodeGetVisibility(handle):
    return _FAI_python.FANodeGetVisibility(handle)

def FANodeInvalidateNode(handle):
    return _FAI_python.FANodeInvalidateNode(handle)

def FANodeGetCachingMode(handle, cachingMode):
    return _FAI_python.FANodeGetCachingMode(handle, cachingMode)

def FANodeGetPollingTime(handle, pollingTime):
    return _FAI_python.FANodeGetPollingTime(handle, pollingTime)

def FANodeGetToolTip(handle, buf, bufLen):
    return _FAI_python.FANodeGetToolTip(handle, buf, bufLen)

def FANodeGetDescription(handle, buf, bufLen):
    return _FAI_python.FANodeGetDescription(handle, buf, bufLen)

def FANodeGetDisplayName(handle, buf, bufLen):
    return _FAI_python.FANodeGetDisplayName(handle, buf, bufLen)

def FANodeRegisterCallback(handle, cbFn):
    return _FAI_python.FANodeRegisterCallback(handle, cbFn)

def FANodeDeregisterCallback(handle, arg2):
    return _FAI_python.FANodeDeregisterCallback(handle, arg2)

def FANodeImposeAccessMode(nodeHandle, imposedAccessMode):
    return _FAI_python.FANodeImposeAccessMode(nodeHandle, imposedAccessMode)

def FANodeImposeVisibility(nodeHandle, imposedVisibility):
    return _FAI_python.FANodeImposeVisibility(nodeHandle, imposedVisibility)

def FANodeGetType(handle):
    return _FAI_python.FANodeGetType(handle)

def FANodeIsImplemented(handle):
    return _FAI_python.FANodeIsImplemented(handle)

def FANodeIsReadable(handle):
    return _FAI_python.FANodeIsReadable(handle)

def FANodeIsWritable(handle):
    return _FAI_python.FANodeIsWritable(handle)

def FANodeIsAvailable(handle):
    return _FAI_python.FANodeIsAvailable(handle)

def FANodeToString(handle, buf, bufLen):
    return _FAI_python.FANodeToString(handle, buf, bufLen)

def FANodeToStringEx(handle, verify, buf, bufLen):
    return _FAI_python.FANodeToStringEx(handle, verify, buf, bufLen)

def FANodeFromStringEx(handle, verify, str):
    return _FAI_python.FANodeFromStringEx(handle, verify, str)

def FANodeFromString(handle, str):
    return _FAI_python.FANodeFromString(handle, str)

def FAIntegerSetValue(handle, value):
    return _FAI_python.FAIntegerSetValue(handle, value)

def FAIntegerSetValueEx(handle, verify, value):
    return _FAI_python.FAIntegerSetValueEx(handle, verify, value)

def FAIntegerGetValue(handle, value):
    return _FAI_python.FAIntegerGetValue(handle, value)

def FAIntegerGetValueEx(handle, verify, value):
    return _FAI_python.FAIntegerGetValueEx(handle, verify, value)

def FAIntegerGetMin(handle, value):
    return _FAI_python.FAIntegerGetMin(handle, value)

def FAIntegerGetMax(handle, value):
    return _FAI_python.FAIntegerGetMax(handle, value)

def FAIntegerGetInc(handle, value):
    return _FAI_python.FAIntegerGetInc(handle, value)

def FAIntegerGetRepresentation(handle, representation):
    return _FAI_python.FAIntegerGetRepresentation(handle, representation)

def FAIntegerGetUnit(handle, buf, bufLen):
    return _FAI_python.FAIntegerGetUnit(handle, buf, bufLen)

def FAFloatSetValue(handle, value):
    return _FAI_python.FAFloatSetValue(handle, value)

def FAFloatSetValueEx(handle, verify, value):
    return _FAI_python.FAFloatSetValueEx(handle, verify, value)

def FAFloatGetValue(handle, value):
    return _FAI_python.FAFloatGetValue(handle, value)

def FAFloatGetValueEx(handle, verify, value):
    return _FAI_python.FAFloatGetValueEx(handle, verify, value)

def FAFloatGetMin(handle, value):
    return _FAI_python.FAFloatGetMin(handle, value)

def FAFloatGetMax(handle, value):
    return _FAI_python.FAFloatGetMax(handle, value)

def FAFloatGetRepresentation(handle, representation):
    return _FAI_python.FAFloatGetRepresentation(handle, representation)

def FAFloatGetUnit(handle, buf, bufLen):
    return _FAI_python.FAFloatGetUnit(handle, buf, bufLen)

def FABooleanSetValue(handle, value):
    return _FAI_python.FABooleanSetValue(handle, value)

def FABooleanGetValue(handle):
    return _FAI_python.FABooleanGetValue(handle)

def FAStringGetValue(handle, buf, bufLen):
    return _FAI_python.FAStringGetValue(handle, buf, bufLen)

def FAStringGetValueEx(handle, verify, buf, bufLen):
    return _FAI_python.FAStringGetValueEx(handle, verify, buf, bufLen)

def FAStringSetValue(handle, str):
    return _FAI_python.FAStringSetValue(handle, str)

def FAStringSetValueEx(handle, verity, str):
    return _FAI_python.FAStringSetValueEx(handle, verity, str)

def FAStringGetMaxLength(handle, value):
    return _FAI_python.FAStringGetMaxLength(handle, value)

def FACommandExecute(handle):
    return _FAI_python.FACommandExecute(handle)

def FACommandIsDone(handle):
    return _FAI_python.FACommandIsDone(handle)

def FAEnumerationGetNumEntries(handle, value):
    return _FAI_python.FAEnumerationGetNumEntries(handle, value)

def FAEnumerationGetEntryByIndex(handle, index):
    return _FAI_python.FAEnumerationGetEntryByIndex(handle, index)

def FAEnumerationSetValueByIndex(handle, index):
    return _FAI_python.FAEnumerationSetValueByIndex(handle, index)

def FAEnumerationGetEntryByName(handle, name):
    return _FAI_python.FAEnumerationGetEntryByName(handle, name)

def FAEnumerationGetCurrentEntry(handle):
    return _FAI_python.FAEnumerationGetCurrentEntry(handle)

def FAEnumEntryGetValue(handle, value):
    return _FAI_python.FAEnumEntryGetValue(handle, value)

def FAEnumEntryGetSymbolic(handle, buf, bufLen):
    return _FAI_python.FAEnumEntryGetSymbolic(handle, buf, bufLen)

def FACategoryGetNumFeatures(handle, value):
    return _FAI_python.FACategoryGetNumFeatures(handle, value)

def FACategoryGetFeatureByIndex(handle, index):
    return _FAI_python.FACategoryGetFeatureByIndex(handle, index)

def FAGenApiCGetLastErrorMessage(pBuf, pBufLen):
    return _FAI_python.FAGenApiCGetLastErrorMessage(pBuf, pBufLen)
FAIC_CAMERA_ANY = _FAI_python.FAIC_CAMERA_ANY
FAIC_CAMERA_GIGE = _FAI_python.FAIC_CAMERA_GIGE
FAIC_CAMERA_USB = _FAI_python.FAIC_CAMERA_USB
FAIC_DEGREE_0 = _FAI_python.FAIC_DEGREE_0
FAIC_DEGREE_45 = _FAI_python.FAIC_DEGREE_45
FAIC_DEGREE_90 = _FAI_python.FAIC_DEGREE_90
FAIC_DEGREE_135 = _FAI_python.FAIC_DEGREE_135
class FaiGrabResult_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    resultPtr = property(_FAI_python.FaiGrabResult_t_resultPtr_get, _FAI_python.FaiGrabResult_t_resultPtr_set)
    isGrabSucceeded = property(_FAI_python.FaiGrabResult_t_isGrabSucceeded_get, _FAI_python.FaiGrabResult_t_isGrabSucceeded_set)
    pBuffer = property(_FAI_python.FaiGrabResult_t_pBuffer_get, _FAI_python.FaiGrabResult_t_pBuffer_set)
    BufferSize = property(_FAI_python.FaiGrabResult_t_BufferSize_get, _FAI_python.FaiGrabResult_t_BufferSize_set)
    PixelType = property(_FAI_python.FaiGrabResult_t_PixelType_get, _FAI_python.FaiGrabResult_t_PixelType_set)
    Width = property(_FAI_python.FaiGrabResult_t_Width_get, _FAI_python.FaiGrabResult_t_Width_set)
    Height = property(_FAI_python.FaiGrabResult_t_Height_get, _FAI_python.FaiGrabResult_t_Height_set)
    BlockID = property(_FAI_python.FaiGrabResult_t_BlockID_get, _FAI_python.FaiGrabResult_t_BlockID_set)
    TimeStamp = property(_FAI_python.FaiGrabResult_t_TimeStamp_get, _FAI_python.FaiGrabResult_t_TimeStamp_set)
    ErrorCode = property(_FAI_python.FaiGrabResult_t_ErrorCode_get, _FAI_python.FaiGrabResult_t_ErrorCode_set)
    ErrorDescription = property(_FAI_python.FaiGrabResult_t_ErrorDescription_get, _FAI_python.FaiGrabResult_t_ErrorDescription_set)

    def __init__(self):
        _FAI_python.FaiGrabResult_t_swiginit(self, _FAI_python.new_FaiGrabResult_t())
    __swig_destroy__ = _FAI_python.delete_FaiGrabResult_t

# Register FaiGrabResult_t in _FAI_python:
_FAI_python.FaiGrabResult_t_swigregister(FaiGrabResult_t)
class FaiDeviceInfo_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ModelName = property(_FAI_python.FaiDeviceInfo_t_ModelName_get, _FAI_python.FaiDeviceInfo_t_ModelName_set)
    DeviceClass = property(_FAI_python.FaiDeviceInfo_t_DeviceClass_get, _FAI_python.FaiDeviceInfo_t_DeviceClass_set)
    SerialNumber = property(_FAI_python.FaiDeviceInfo_t_SerialNumber_get, _FAI_python.FaiDeviceInfo_t_SerialNumber_set)

    def __init__(self):
        _FAI_python.FaiDeviceInfo_t_swiginit(self, _FAI_python.new_FaiDeviceInfo_t())
    __swig_destroy__ = _FAI_python.delete_FaiDeviceInfo_t

# Register FaiDeviceInfo_t in _FAI_python:
_FAI_python.FaiDeviceInfo_t_swigregister(FaiDeviceInfo_t)
class FaiImageInfo_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PixelType = property(_FAI_python.FaiImageInfo_t_PixelType_get, _FAI_python.FaiImageInfo_t_PixelType_set)
    Width = property(_FAI_python.FaiImageInfo_t_Width_get, _FAI_python.FaiImageInfo_t_Width_set)
    Height = property(_FAI_python.FaiImageInfo_t_Height_get, _FAI_python.FaiImageInfo_t_Height_set)
    paddingX = property(_FAI_python.FaiImageInfo_t_paddingX_get, _FAI_python.FaiImageInfo_t_paddingX_set)
    pBuffer = property(_FAI_python.FaiImageInfo_t_pBuffer_get, _FAI_python.FaiImageInfo_t_pBuffer_set)
    BufferSize = property(_FAI_python.FaiImageInfo_t_BufferSize_get, _FAI_python.FaiImageInfo_t_BufferSize_set)

    def __init__(self):
        _FAI_python.FaiImageInfo_t_swiginit(self, _FAI_python.new_FaiImageInfo_t())
    __swig_destroy__ = _FAI_python.delete_FaiImageInfo_t

# Register FaiImageInfo_t in _FAI_python:
_FAI_python.FaiImageInfo_t_swigregister(FaiImageInfo_t)

def FAInitialize():
    return _FAI_python.FAInitialize()

def FATerminate():
    return _FAI_python.FATerminate()

def FAIDevice_CreateByIndex(index, type):
    return _FAI_python.FAIDevice_CreateByIndex(index, type)

def FAIDevice_CreateByDeviceInfo(devInfo):
    return _FAI_python.FAIDevice_CreateByDeviceInfo(devInfo)

def FAIDevice_GetCameraHandleFromPython(handle):
    return _FAI_python.FAIDevice_GetCameraHandleFromPython(handle)

def FAIDevice_Release(_self):
    return _FAI_python.FAIDevice_Release(_self)

def FAIDevice_Open(_self):
    return _FAI_python.FAIDevice_Open(_self)

def FAIDevice_IsOpen(_self):
    return _FAI_python.FAIDevice_IsOpen(_self)

def FAIDevice_Close(_self):
    return _FAI_python.FAIDevice_Close(_self)

def FAIDevice_IsCameraDeviceRemoved(_self):
    return _FAI_python.FAIDevice_IsCameraDeviceRemoved(_self)

def FAIDevice_StartGrabbing(_self):
    return _FAI_python.FAIDevice_StartGrabbing(_self)

def FAIDevice_StopGrabbing(_self):
    return _FAI_python.FAIDevice_StopGrabbing(_self)

def FAIDevice_IsGrabbing(_self):
    return _FAI_python.FAIDevice_IsGrabbing(_self)

def FAIDevice_RetrieveGrabResult(_self, usec, result):
    return _FAI_python.FAIDevice_RetrieveGrabResult(_self, usec, result)

def FAIDevice_ParseGrabResult(_self, result):
    return _FAI_python.FAIDevice_ParseGrabResult(_self, result)

def FAIDevice_GetDeviceInfo(_self, devInfo):
    return _FAI_python.FAIDevice_GetDeviceInfo(_self, devInfo)

def FAIDevice_GetNodeMap(_self):
    return _FAI_python.FAIDevice_GetNodeMap(_self)

def FAIDevice_RegisterConfigurationRemovalCallback(_self, cbFn):
    return _FAI_python.FAIDevice_RegisterConfigurationRemovalCallback(_self, cbFn)

def FAIDevice_DeregisterConfigurationRemovalCallback(_self, cbHandle):
    return _FAI_python.FAIDevice_DeregisterConfigurationRemovalCallback(_self, cbHandle)

def FAIDevice_RegisterImageGrabedCallback(_self, cbFn):
    return _FAI_python.FAIDevice_RegisterImageGrabedCallback(_self, cbFn)

def FAIDevice_RegisterImageGrabedExCallback(_self, cbFn, pUserData):
    return _FAI_python.FAIDevice_RegisterImageGrabedExCallback(_self, cbFn, pUserData)

def FAIDevice_DeregisterImageGrabedCallback(_self, cbHandle):
    return _FAI_python.FAIDevice_DeregisterImageGrabedCallback(_self, cbHandle)

def FAIDevice_DeregisterImageGrabedExCallback(_self, cbHandle):
    return _FAI_python.FAIDevice_DeregisterImageGrabedExCallback(_self, cbHandle)

def FAIDevice_CanWaitForFrameTriggerReady(_self):
    return _FAI_python.FAIDevice_CanWaitForFrameTriggerReady(_self)

def FAIDevice_WaitForFrameTriggerReady(_self, ms):
    return _FAI_python.FAIDevice_WaitForFrameTriggerReady(_self, ms)

def FAIDevice_GetLastFrameTriggerFailReason(pBuf, messageLen):
    return _FAI_python.FAIDevice_GetLastFrameTriggerFailReason(pBuf, messageLen)

def FAIDevice_EnumerateDevices():
    return _FAI_python.FAIDevice_EnumerateDevices()

def FAIDevice_PrintGigeDeviceListInfo():
    return _FAI_python.FAIDevice_PrintGigeDeviceListInfo()

def FAIDevice_FeatureSaverCreate(camera):
    return _FAI_python.FAIDevice_FeatureSaverCreate(camera)

def FAIDevice_FeatureSaverRelease(_self):
    return _FAI_python.FAIDevice_FeatureSaverRelease(_self)

def FAIDevice_FeatureSaveToFile(_self, filename):
    return _FAI_python.FAIDevice_FeatureSaveToFile(_self, filename)

def FAIDevice_FeatureLoadFromFile(_self, filename):
    return _FAI_python.FAIDevice_FeatureLoadFromFile(_self, filename)

def FAIDevice_ImageCreate():
    return _FAI_python.FAIDevice_ImageCreate()

def FAIDevice_ImageCreateByGrabResult(result):
    return _FAI_python.FAIDevice_ImageCreateByGrabResult(result)

def FAIDevice_ImageCreateByParameter(format, width, height, paddingX):
    return _FAI_python.FAIDevice_ImageCreateByParameter(format, width, height, paddingX)

def FAIDevice_ImageRelease(_self):
    return _FAI_python.FAIDevice_ImageRelease(_self)

def FAIDevice_ImageGetInfo(_self, info):
    return _FAI_python.FAIDevice_ImageGetInfo(_self, info)

def FAIDevice_ImageFormatConverterCreate():
    return _FAI_python.FAIDevice_ImageFormatConverterCreate()

def FAIDevice_ImageFormatConverterRelease(_self):
    return _FAI_python.FAIDevice_ImageFormatConverterRelease(_self)

def FAIDevice_ImageFormatConverterSetOutputFormat(_self, format):
    return _FAI_python.FAIDevice_ImageFormatConverterSetOutputFormat(_self, format)

def FAIDevice_ImageFormatConverterConvert(_self, destination, source):
    return _FAI_python.FAIDevice_ImageFormatConverterConvert(_self, destination, source)

def FAIDevice_ImageProcessHistEqual(_in, out):
    return _FAI_python.FAIDevice_ImageProcessHistEqual(_in, out)

def FAIDevice_ImageProcessHistStretch(_in, out, fmin, fmax):
    return _FAI_python.FAIDevice_ImageProcessHistStretch(_in, out, fmin, fmax)

def FAIDevice_ImageProcessExtractPolarQuadrant(_in, out, degree):
    return _FAI_python.FAIDevice_ImageProcessExtractPolarQuadrant(_in, out, degree)

def FAIDevice_GetDeviceInfoByIndex(index, info):
    return _FAI_python.FAIDevice_GetDeviceInfoByIndex(index, info)

def FAIDevice_LSCCalibrateCreateByNodeMap():
    return _FAI_python.FAIDevice_LSCCalibrateCreateByNodeMap()

def FAIDevice_LSCCalibrateCreateByCamera(camera):
    return _FAI_python.FAIDevice_LSCCalibrateCreateByCamera(camera)

def FAIDevice_LSCCalibrateCalibrateByImage(_self, image):
    return _FAI_python.FAIDevice_LSCCalibrateCalibrateByImage(_self, image)

def FAIDevice_LSCCalibrateloadParameters(_self, filename):
    return _FAI_python.FAIDevice_LSCCalibrateloadParameters(_self, filename)

def FAIDevice_LSCCalibrateapplyLSCCorrection(_self, _in, out, image_pix_max):
    return _FAI_python.FAIDevice_LSCCalibrateapplyLSCCorrection(_self, _in, out, image_pix_max)

def FAIDevice_GigeTLayerCreate():
    return _FAI_python.FAIDevice_GigeTLayerCreate()

def FAIDevice_GigeTLayerRelease(_self):
    return _FAI_python.FAIDevice_GigeTLayerRelease(_self)

def FAIDevice_GigeTLayerBroadcastIpConfiguration(_self, mac_address, enable_persistent_ip, enable_dhcp, ip_address, sub_netmask, default_gateway):
    return _FAI_python.FAIDevice_GigeTLayerBroadcastIpConfiguration(_self, mac_address, enable_persistent_ip, enable_dhcp, ip_address, sub_netmask, default_gateway)

def FAIDevice_GigeTLayerRestartIpConfiguration(_self, mac_address):
    return _FAI_python.FAIDevice_GigeTLayerRestartIpConfiguration(_self, mac_address)

import ctypes

# a ctypes callback prototype
py_camera_callback_type = ctypes.CFUNCTYPE(None, ctypes.c_void_p)
py_node_callback_type = ctypes.CFUNCTYPE(None, ctypes.c_void_p)

def FAIDevice_RegisterConfigurationRemovalCallback(_self: "FAI_CAMERA_HANDLE", cbFn: "FACameraCallbackFunction") -> "FA_CAMERA_CALLBACK_HANDLE *":
# wrap the python callback with a ctypes function pointer
	f1 = py_camera_callback_type(cbFn)
# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
	f1_ptr = ctypes.cast(f1, ctypes.c_void_p).value
	return _FAI_python.FAIDevice_RegisterConfigurationRemovalCallback(_self, f1_ptr)

def FAIDevice_RegisterImageGrabedCallback(_self: "FAI_CAMERA_HANDLE", cbFn: "FACameraCallbackFunction") -> "FA_CAMERA_CALLBACK_HANDLE *":
# wrap the python callback with a ctypes function pointer
	f1 = py_camera_callback_type(cbFn)
# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
	f1_ptr = ctypes.cast(f1, ctypes.c_void_p).value
	return _FAI_python.FAIDevice_RegisterImageGrabedCallback(_self, f1_ptr)

def FANodeRegisterCallback(handle: "FANodeHandle", cbFn: "FACallbackFunction") -> "FACallbackHandle *":
# wrap the python callback with a ctypes function pointer
	f1 = py_node_callback_type(cbFn)
# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
	f1_ptr = ctypes.cast(f1, ctypes.c_void_p).value
	return _FAI_python.FANodeRegisterCallback(handle, f1_ptr)



__version__ = '2025.1.10.dev55491'
